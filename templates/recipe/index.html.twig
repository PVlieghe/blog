{% extends 'base.html.twig' %}

{% block title %}Recettes{% endblock %}

{% block body %}
<div class="body">
        <div class="row">
            <div class="col-3 p-3 ">  
                <form id="sort-form" class="mb-5 ml-auto bg-secondary">
                    
                    <div class="form-group">
                        <label for="sort">Trier par:</label>
                        <select id="sort" name="sort" class="form w-100">
                            <option value="date">Date d'ajout</option>
                            <option value="likes">Nombre de likes</option>
                            <option value="rating">Note moyenne</option>
                        </select>
                    </div>
                    </form>
                <div class="scroll bg-secondary relative mb-5" style="max-height: 50vh;">
                        {{ include('recipe/_search_form.html.twig') }}
                </div>
                  
                <a class="btn btn-primary" href="{{ path('app_recipe_new') }}">Créer une nouvelle recette !</a>  
            </div>
            <div class="col-8 p-3 align-items-center">
                <div class="table scroll" style="max-height: 80vh;">
                    <table id="recipe-table" class="table table-striped">
                        <thead class="thead-fixed bg-dark">
                            <tr>
                                <th>Date d'ajout</th>
                                <th>Nombre d'étapes</th>
                                <th>Name</th>
                                <th>Créateur</th>
                                <th>Nombre de like</th>
                                <th>Note moyenne</th>
                                <th>actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        {% for recipe in recipes %}
                            <tr data-id="{{ recipe.id }}" data-likes="{{ recipe.likes|length }}" data-rating="{{ averageRatings[recipe.id]|default(0) }}" data-date="{{ recipe.createdAt|date('Y-m-d H:i:s') }}">
                                <td>{{ recipe.createdAt|date('d-m-Y') }}</td>
                                <td>{{ recipe.steps|length }}</td>
                                <td>{{ recipe.name }}</td>
                                <td>{{ recipe.user.username }}</td>
                                <td>{{ recipe.likes|length }}</td>
                                <td>
                                    {% set averageRating = averageRatings[recipe.id] %}
                                    {% if averageRating is not null %}
                                        {{ averageRating }}/5
                                    {% else %}
                                        Aucune note disponible
                                    {% endif %}
                                </td>
                                <td>
                                    <a href="{{ path('app_recipe_show', {'id': recipe.id}) }}">show</a>
                                    {% if app.user.email == recipe.user.email %}
                                        <a href="{{ path('app_recipe_edit', {'id': recipe.id}) }}">edit</a>
                                    {% endif %}
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="7">Pas de recette trouvée!</td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    

    <script>
    document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort');
    const recipeTable = document.getElementById('recipe-table');
    const tbody = recipeTable.querySelector('tbody');

    sortSelect.addEventListener('change', () => {
        const sortValue = sortSelect.value;
        const rows = Array.from(tbody.querySelectorAll('tr'));

        rows.sort((a, b) => {
            let aValue, bValue;
            
            switch (sortValue) {
                case 'likes':
                    aValue = parseInt(a.dataset.likes);
                    bValue = parseInt(b.dataset.likes);
                    return bValue - aValue;
                case 'rating':
                    aValue = parseFloat(a.dataset.rating);
                    bValue = parseFloat(b.dataset.rating);
                    return bValue - aValue;
                case 'date':
                default:
                    aValue = new Date(a.dataset.date);
                    bValue = new Date(b.dataset.date);
                    return bValue - aValue;
            }
        });

        // Clear existing rows
        while (tbody.firstChild) {
            tbody.removeChild(tbody.firstChild);
        }

        // Append sorted rows
        rows.forEach(row => tbody.appendChild(row));
    });
});

    </script>


{% endblock %}
